{"ast":null,"code":"var _jsxFileName = \"D:\\\\junior\\\\28_04 design system\\\\design-system-app\\\\src\\\\components\\\\DragAndDrop\\\\ReorderableList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReorderableList = ({\n  items\n}) => {\n  _s();\n  const [list, setList] = useState(items);\n  const handleDragEnd = result => {\n    if (!result.destination) return; // If dropped outside a valid area, do nothing\n\n    const updatedList = Array.from(list);\n    const [movedItem] = updatedList.splice(result.source.index, 1); // Remove the dragged item\n    updatedList.splice(result.destination.index, 0, movedItem); // Insert it at the new position\n\n    setList(updatedList); // Update the state with the new order\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"droppable\",\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"droppable\",\n        ...provided.droppableProps,\n        ref: provided.innerRef,\n        style: {\n          padding: '16px',\n          backgroundColor: '#f8f9fa',\n          border: '1px solid #ddd',\n          borderRadius: '4px',\n          minHeight: '100px'\n        },\n        children: [list.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: item,\n          index: index,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"draggable\",\n            ref: provided.innerRef,\n            ...provided.draggableProps,\n            ...provided.dragHandleProps,\n            style: {\n              padding: '8px 16px',\n              marginBottom: '8px',\n              backgroundColor: '#ffffff',\n              border: '1px solid #ddd',\n              borderRadius: '4px',\n              cursor: 'grab',\n              ...provided.draggableProps.style\n            },\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 19\n          }, this)\n        }, item, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this)), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ReorderableList, \"LA5pJI1oB2RHBQAmrDJfac4M10g=\");\n_c = ReorderableList;\nexport default ReorderableList;\nvar _c;\n$RefreshReg$(_c, \"ReorderableList\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","ReorderableList","items","_s","list","setList","handleDragEnd","result","destination","updatedList","Array","from","movedItem","splice","source","index","onDragEnd","children","droppableId","provided","className","droppableProps","ref","innerRef","style","padding","backgroundColor","border","borderRadius","minHeight","map","item","draggableId","draggableProps","dragHandleProps","marginBottom","cursor","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c","$RefreshReg$"],"sources":["D:/junior/28_04 design system/design-system-app/src/components/DragAndDrop/ReorderableList.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\ninterface ReorderableListProps {\n  items: string[];\n}\n\nconst ReorderableList: React.FC<ReorderableListProps> = ({ items }) => {\n  const [list, setList] = useState(items);\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return; // If dropped outside a valid area, do nothing\n\n    const updatedList = Array.from(list);\n    const [movedItem] = updatedList.splice(result.source.index, 1); // Remove the dragged item\n    updatedList.splice(result.destination.index, 0, movedItem); // Insert it at the new position\n\n    setList(updatedList); // Update the state with the new order\n  };\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"droppable\">\n        {(provided) => (\n          <div\n            className=\"droppable\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n            style={{\n              padding: '16px',\n              backgroundColor: '#f8f9fa',\n              border: '1px solid #ddd',\n              borderRadius: '4px',\n              minHeight: '100px',\n            }}\n          >\n            {list.map((item, index) => (\n              <Draggable key={item} draggableId={item} index={index}>\n                {(provided) => (\n                  <div\n                    className=\"draggable\"\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={{\n                      padding: '8px 16px',\n                      marginBottom: '8px',\n                      backgroundColor: '#ffffff',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      cursor: 'grab',\n                      ...provided.draggableProps.style,\n                    }}\n                  >\n                    {item}\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nexport default ReorderableList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM5E,MAAMC,eAA+C,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACO,KAAK,CAAC;EAEvC,MAAMI,aAAa,GAAIC,MAAW,IAAK;IACrC,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE,OAAO,CAAC;;IAEjC,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAACP,IAAI,CAAC;IACpC,MAAM,CAACQ,SAAS,CAAC,GAAGH,WAAW,CAACI,MAAM,CAACN,MAAM,CAACO,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IAChEN,WAAW,CAACI,MAAM,CAACN,MAAM,CAACC,WAAW,CAACO,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC,CAAC,CAAC;;IAE5DP,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACET,OAAA,CAACJ,eAAe;IAACoB,SAAS,EAAEV,aAAc;IAAAW,QAAA,eACxCjB,OAAA,CAACH,SAAS;MAACqB,WAAW,EAAC,WAAW;MAAAD,QAAA,EAC9BE,QAAQ,iBACRnB,OAAA;QACEoB,SAAS,EAAC,WAAW;QAAA,GACjBD,QAAQ,CAACE,cAAc;QAC3BC,GAAG,EAAEH,QAAQ,CAACI,QAAS;QACvBC,KAAK,EAAE;UACLC,OAAO,EAAE,MAAM;UACfC,eAAe,EAAE,SAAS;UAC1BC,MAAM,EAAE,gBAAgB;UACxBC,YAAY,EAAE,KAAK;UACnBC,SAAS,EAAE;QACb,CAAE;QAAAZ,QAAA,GAEDb,IAAI,CAAC0B,GAAG,CAAC,CAACC,IAAI,EAAEhB,KAAK,kBACpBf,OAAA,CAACF,SAAS;UAAYkC,WAAW,EAAED,IAAK;UAAChB,KAAK,EAAEA,KAAM;UAAAE,QAAA,EAClDE,QAAQ,iBACRnB,OAAA;YACEoB,SAAS,EAAC,WAAW;YACrBE,GAAG,EAAEH,QAAQ,CAACI,QAAS;YAAA,GACnBJ,QAAQ,CAACc,cAAc;YAAA,GACvBd,QAAQ,CAACe,eAAe;YAC5BV,KAAK,EAAE;cACLC,OAAO,EAAE,UAAU;cACnBU,YAAY,EAAE,KAAK;cACnBT,eAAe,EAAE,SAAS;cAC1BC,MAAM,EAAE,gBAAgB;cACxBC,YAAY,EAAE,KAAK;cACnBQ,MAAM,EAAE,MAAM;cACd,GAAGjB,QAAQ,CAACc,cAAc,CAACT;YAC7B,CAAE;YAAAP,QAAA,EAEDc;UAAI;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF;QACN,GAnBaT,IAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBT,CACZ,CAAC,EACDrB,QAAQ,CAACsB,WAAW;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEtB,CAAC;AAACrC,EAAA,CA1DIF,eAA+C;AAAAyC,EAAA,GAA/CzC,eAA+C;AA4DrD,eAAeA,eAAe;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}